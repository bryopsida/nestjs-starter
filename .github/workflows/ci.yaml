name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
    validate-node:
        name: 'Validate'
        uses: curium-rocks/flows/.github/workflows/node-ts.yml@main
        with:
          continue-on-prod-vulns: false
          node_versions: '{"node-version": ["16.x","18.x", "20.x"]}'
        secrets:
          SONARQUBE_KEY: ${{ secrets.SONARQUBE_KEY }}
    build-container:
        name: 'Build container image'
        uses: curium-rocks/flows/.github/workflows/oci-build-image.yml@main
        needs: validate-node
        with:
            registry: ghcr.io/bryopsida
            image_name: nestjs-starter
            push_in_pr: false
  # deploy it and verify that expected things are allowed or disallowed
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        k8s-version: [1.22, 1.23, 1.24, 1.25]
    needs:
     - build-image
    env:
      REGISTRY: 'ghcr.io'
      IMAGE_NAME: 'curium-rocks/k8s-jacoco-operator'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Spin Up MicroK8S
        run: |
          sudo snap install microk8s --classic --channel=${{ matrix.k8s-version }}/stable
          sudo microk8s enable dns storage rbac ingress
          sudo microk8s status --wait-ready
          sudo microk8s kubectl rollout status deployment/hostpath-provisioner -n kube-system
          mkdir -p ~/.kube
          sudo microk8s config > ~/.kube/config
          sudo snap install kubectl --classic
      - name: Create Pull Secret
        run: npm run k8s:createPullSecret --helm_namespace=default --registry_username=${{ github.actor }} --registry_password=${{ github.token }}
      - name: Add Helm Repos
        run: npm run helm:addRepos
      - name: Deploy CertManager
        run: npm run helm:deployCertManager
      - name: Deploy (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: npm run helm:deploy -- --set 'imagePullSecrets[0].name'=ghcr-credentials --set image.tag=pr-${{ github.event.number }}
      - name: Deploy (Branch)
        if: ${{ github.event_name != 'pull_request' }}
        timeout-minutes: 10
        run: npm run helm:deploy -- --set 'imagePullSecrets[0].name'=ghcr-credentials --set image.tag=main
      - name: Run E2E Tests
        run: npm run test:e2e
      - name: Collect Logs On Failure
        if: ${{ failure() }}
        run: |
          mkdir -p /tmp/failure-logs
          kubectl logs deployments/k8s-jacoco-operator --prefix=true --ignore-errors=true --timestamps --pod-running-timeout=60s > /tmp/failure-logs/k8s-jacoco-operator.deployment.log
          kubectl describe deployment k8s-jacoco-operator > /tmp/failure-logs/k8s-jacoco-operator.deployment.describe
          kubectl get deployment k8s-jacoco-operator -o yaml > /tmp/failure-logs/k8s-jacoco-operator.deployment.yaml
          kubectl describe configmap k8s-jacoco-operator > /tmp/failure-logs/k8s-jacoco-operator.configmap.describe
          inspectTarball=$(sudo microk8s inspect | grep -Po "/var/snap/microk8s/.*\.tar\.gz")
          sudo cp $inspectTarball /tmp/failure-logs/
      - name: Upload Logs On Failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.name }} microk8s logs
          path: |
            /tmp/failure-logs
  publish-chart:
    if: ${{ github.event_name != 'pull_request' }}
    needs:
    - verify
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write     
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.5.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: helm